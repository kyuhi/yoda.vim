*yoda.txt*  A VIM plug-in for completion using libclang

===============================================================================
Contents ~

 1. Introduction                                            |yoda-introduction|
 2. Features                                                    |yoda-features|
 3. Requirements                                            |yoda-requirements|
 4. Quick Start                                              |yoda-quick-start|
  1. A Recipe For Configuration                 |yoda-recipe-for-configuration|
 5. Commands                                                    |yoda-commands|
  1. The ':YodaGoto [where]' command                          |:YodaGoto-where|
  2. The |:YodaShowErrors| command
 6. Options                                                      |yoda-options|
  1. The |g:yoda_clang_library| option
  2. The |g:yoda_super_trigger_key| option
  3. The |g:yoda_window_split_behavior| option
  4. The |g:yoda_config_basename| option
  5. The |g:yoda_config_funcname| option
  6. The |g:yoda_config_pass_arg| option
  7. The |g:yoda_snippet_engine| option
  8. The |g:yoda_snippet_space_in_parenthes| option
 7. Functions                                                  |yoda-functions|
  1. The |yoda#diagnostic_qflist()| function
  2. The 'yoda#location_to( where )' function              |yoda#location_to()|
 8. License                                                      |yoda-license|
  1. The software uses a function part of code snippts from jedi-vim [3] for
python/vim unicode support. |yoda-software-uses-function-part-of-code-snippts-from-jedi-vim-3-for-python-vim-unicode-support.|
 9. References                                                |yoda-references|

===============================================================================
                                                            *yoda-introduction*
Introduction ~

lib

===============================================================================
                                                                *yoda-features*
Features ~

- Fast code completion for C/C++ and Objective-C/C++.
- Load compilation options using your python configuration file.
- Show code diagnostics in quick fix window or you can use disagnostics as
  you want.
- Automatically insert variable segments, substring of candidate supported
  snake case or camel case, when completion (Like XCode behaivior).
- Support snippets if you have installed ultisnips.
- Works on python2 and python3.

===============================================================================
                                                            *yoda-requirements*
Requirements ~

- VIM has compiled with +python or +python3 (Requires: This plug-in is
  written in python.)

- libclang.(so | dylib) [1] (Requires: To be loaded via python.)

- ultisnips [2] (Optional: Expand snippets like function arguments, template
  parameters, etc)

===============================================================================
                                                             *yoda-quick-start*
Quick Start ~

To use yoda-vim for completions, you have to do is. 1. Add yoda-vim in VIM
runtime path manually or using plug-in manager like Vundle. 2. Tell yoda-vim
where a clang dynamic library is. 3. Write python configuration file of
'.yoda_config.py' for your project.

Python configuration file is a python file, default basename is
'.yoda_config.py', should give clang compilation flags. yoda-vim search the
file in the directory or above it in the hierachy when a new C-fammily file
read. And it will call function, default name is 'Flags', using vim's
information as it's argument, you can set it via |g:yoda_config_pass_arg|, to
give clang the flags. Folowing is a recipe.

-------------------------------------------------------------------------------
                                                *yoda-recipe-for-configuration*
A Recipe For Configuration ~

In your '.vimrc'.
>
  " Set full path of clang library path.
  " You do not have to set this configuration if you have installed `llvm-config` in your $PATH.
  " For more ditails, see option 'g:yoda_clang_library'.
  let g:yoda_clang_library = '/path/to/clang-library'
  
  " Set snippet engine if ultisnips is in your VIM runtime
  let g:yoda_snippet_engine = 'ultisnips'
  
  " Pass filename and filetype as dict for an argument of python config file.
  " NOTE: This example set string of dict. You can set any evaluatable strings
  " like global functions etc.
  let g:yoda_config_pass_arg = 
  \  "{'filename' : expand('%:p'),"
  \ . "'filetype' : &l:filetype}"
<
In '.yoda_config.py'.
>
  import os
  
  def Flags( fileinfo ):
    '''
    The function is called when yoda-vim read a new C-fammily file.
    It have to return compilation flags for clang, may return only flags related
    to syntax.
    Also can return None if you want to disable the completion in the file.
    '''
    filename = fileinfo['filename']
    filetype = fileinfo['filetype']
  
    # Disable completion if `filename` is above your home directory.
    # NOTE: This is an example. You can remove this block as you want.
    if not filename.startswith( os.path.expanduser('~/') ):
      return None
  
    # Get compilation flags related to a `filetype`.
    # NOTE: Clang does not know filetype of parsing file. So you should tell
    # clang it's filetype to set compilation flags as '-x', 'LANG(c++ etc...)' and
    # '-std=WHAT(c99 etc...)'. Because this is an example, you should add suitable
    # compilation flags for your project.
    common_flags = ['-Wall', '-I' + os.path.dirname( filename )]
    ft_flags = dict( 
      c=['-x', 'c', '-std=c99'],
      cpp=['-x', 'c++', '-std=c++11'],
      objc=['-x', 'objective-c', '-std=c99', '-fobjcarc'],
      objcpp=['-x', 'objective-c++', '-std=c++11', '-fobjcarc'],
    )
    return common_flags + ft_flags[ filetype ]
<
===============================================================================
                                                                *yoda-commands*
Commands ~

-------------------------------------------------------------------------------
                                                              *:YodaGoto-where*
The ':YodaGoto [where]' command ~

Goto the location to definition or declaration under the cursor if possible.
The argument of 'where' is where to jump. It is supposed to be "'Definition'"
or "'Declaration'". If no arguments are given. Go to the declaration.

-------------------------------------------------------------------------------
The *:YodaShowErrors* command

Set quickfix list of diagnostics in current buffer and open it's window. If you
want to know about quickfix, See ':help quickfix'.

===============================================================================
                                                                 *yoda-options*
Options ~

-------------------------------------------------------------------------------
The *g:yoda_clang_library* option

This option specifies a path to a clang dynamic library file. If the option is
not set. The followings are used for searching the library. 1. Search the
library in directory using 'llvm-config --libdir' if possible. 2. If 1 failed
to find. Search it in directories of '$LD_LIBRARY_PATH'. 3. Otherwise Turn off
the plug-in.

Type: str Default: "''"

-------------------------------------------------------------------------------
The *g:yoda_super_trigger_key* option

This option controls the key mapping used to trigger the first completion
string when popup menu is visible. Trigger behaivior has multiple state. 1. If
snippet is enable and inserted text matches completion exactly, expand it's
snippet. 2. If only one candidate exists, insert this text. 3. Otherwise insert
text to next variable segments (XCode like behaivior).

Type: str Default:"'<Tab>'"

-------------------------------------------------------------------------------
The *g:yoda_window_split_behavior* option

This option controls how to open a new window when ':YodaGoto' command is
invoked.

Type: str Default: "'split'" Supported behaiviors: "'edit'", "'split'",
"'vsplit'"

-------------------------------------------------------------------------------
The *g:yoda_config_basename* option

This option specifies a basename of python configuration file.

Type: str Default: "'.yoda_config.py'"

-------------------------------------------------------------------------------
The *g:yoda_config_funcname* option

This option specifies a name of function in python configuration file to be
used to set compilation flags for current buffer.

Type: str Default: "'Flags'"

-------------------------------------------------------------------------------
The *g:yoda_config_pass_arg* option

This option is used to pass argument for function in python configuration file.
The option evaluate when new buffer is opened.

Type: str Default: "'expand("%:p")'"

-------------------------------------------------------------------------------
The *g:yoda_snippet_engine* option

This option select a snippet engine to use expand placeholder of completion.

Supported snippet engines: '"ultisnips"' Type: str Default:"''"

-------------------------------------------------------------------------------
The *g:yoda_snippet_space_in_parenthes* option

This option enable to insert spaces in parenthes when snippet trigger.

Type: int Default: '0'

===============================================================================
                                                               *yoda-functions*
Functions ~

-------------------------------------------------------------------------------
The *yoda#diagnostic_qflist()* function

Get diagnostics of quick fix list of current buffer. If you want to know about
it's format, See ':help setqflist()'.

Return: list

-------------------------------------------------------------------------------
                                                           *yoda#location_to()*
The 'yoda#location_to( where )' function ~

Get location under the current cursor.

Return: dict Argument 'where': where to location (str) Supported locations:
"'Definition'", "'Declaration'"

===============================================================================
                                                                 *yoda-license*
License ~

The MIT License (MIT)

Copyright (C) 2014 by Kaika Yuhi

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

-------------------------------------------------------------------------------
*yoda-software-uses-function-part-of-code-snippts-from-jedi-vim-3-for-python-vim-unicode-support.*
The software uses a function part of code snippts from jedi-vim [3] for ~
python/vim unicode support. ~

The MIT License (MIT)

Copyright (c) 2013 David Halter and others, see AUTHORS.txt [4]

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions: The above copyright notice and this
permission notice shall be included in all copies or substantial portions of
the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===============================================================================
                                                              *yoda-references*
References ~

[1] http://clang.llvm.org
[2] https://github.com/SirVer/ultisnips
[3] https://github.com/davidhalter/jedi-vim
[4] https://github.com/davidhalter/jedi-vim/AUTHORS.txt

vim: ft=help
